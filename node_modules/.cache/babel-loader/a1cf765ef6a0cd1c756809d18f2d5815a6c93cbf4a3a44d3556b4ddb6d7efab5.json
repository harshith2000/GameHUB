{"ast":null,"code":"var _jsxFileName = \"/Users/saiharshithkaruneegarramesh/Desktop/409/mp2/src/components/GenreList.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport useGenres from \"../hooks/useGenres\";\nimport { Button, HStack, Image, List, ListItem, Spinner } from \"@chakra-ui/react\";\nimport cropImageinURL from \"../services/cropImageinURL\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenreList = ({\n  selectedGenre,\n  onSelectGenre\n}) => {\n  _s();\n  const {\n    genres,\n    isLoading,\n    error\n  } = useGenres();\n  if (error) return null;\n  if (isLoading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: genres.map(genre => /*#__PURE__*/_jsxDEV(ListItem, {\n      paddingY: \"10px\",\n      children: /*#__PURE__*/_jsxDEV(HStack, {\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          boxSize: \"40px\",\n          borderRadius: 8,\n          src: cropImageinURL(genre.image_background)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          whiteSpace: \"normal\",\n          textAlign: \"left\",\n          fontWeight: genre.id === (selectedGenre === null || selectedGenre === void 0 ? void 0 : selectedGenre.id) ? \"bold\" : \"normal\",\n          onClick: () => onSelectGenre(genre),\n          variant: \"link\",\n          children: genre.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)\n    }, genre.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(GenreList, \"hHeMa76MLNCZFcTR6FB2p5MRKhE=\", false, function () {\n  return [useGenres];\n});\n_c = GenreList;\nexport default GenreList;\nvar _c;\n$RefreshReg$(_c, \"GenreList\");","map":{"version":3,"names":["React","useGenres","Button","HStack","Image","List","ListItem","Spinner","cropImageinURL","jsxDEV","_jsxDEV","GenreList","selectedGenre","onSelectGenre","_s","genres","isLoading","error","fileName","_jsxFileName","lineNumber","columnNumber","children","map","genre","paddingY","boxSize","borderRadius","src","image_background","whiteSpace","textAlign","fontWeight","id","onClick","variant","name","_c","$RefreshReg$"],"sources":["/Users/saiharshithkaruneegarramesh/Desktop/409/mp2/src/components/GenreList.tsx"],"sourcesContent":["import React from \"react\";\nimport useGenres, { Genre } from \"../hooks/useGenres\";\nimport {\n  Button,\n  HStack,\n  Image,\n  List,\n  ListItem,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport cropImageinURL from \"../services/cropImageinURL\";\n\ninterface Props {\n  onSelectGenre: (genre: Genre) => void;\n  selectedGenre: Genre | null;\n}\n\nconst GenreList = ({ selectedGenre, onSelectGenre }: Props) => {\n  const { genres, isLoading, error } = useGenres();\n\n  if (error) return null;\n  if (isLoading) return <Spinner />;\n  return (\n    <List>\n      {genres.map((genre) => (\n        <ListItem key={genre.id} paddingY=\"10px\">\n          <HStack>\n            <Image\n              boxSize=\"40px\"\n              borderRadius={8}\n              src={cropImageinURL(genre.image_background)}\n            />\n            <Button\n              whiteSpace=\"normal\"\n              textAlign=\"left\"\n              fontWeight={genre.id === selectedGenre?.id ? \"bold\" : \"normal\"}\n              onClick={() => onSelectGenre(genre)}\n              variant=\"link\"\n            >\n              {genre.name}\n            </Button>\n          </HStack>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default GenreList;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAiB,oBAAoB;AACrD,SACEC,MAAM,EACNC,MAAM,EACNC,KAAK,EACLC,IAAI,EACJC,QAAQ,EACRC,OAAO,QACF,kBAAkB;AACzB,OAAOC,cAAc,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOxD,MAAMC,SAAS,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAqB,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAGhB,SAAS,CAAC,CAAC;EAEhD,IAAIgB,KAAK,EAAE,OAAO,IAAI;EACtB,IAAID,SAAS,EAAE,oBAAON,OAAA,CAACH,OAAO;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACjC,oBACEX,OAAA,CAACL,IAAI;IAAAiB,QAAA,EACFP,MAAM,CAACQ,GAAG,CAAEC,KAAK,iBAChBd,OAAA,CAACJ,QAAQ;MAAgBmB,QAAQ,EAAC,MAAM;MAAAH,QAAA,eACtCZ,OAAA,CAACP,MAAM;QAAAmB,QAAA,gBACLZ,OAAA,CAACN,KAAK;UACJsB,OAAO,EAAC,MAAM;UACdC,YAAY,EAAE,CAAE;UAChBC,GAAG,EAAEpB,cAAc,CAACgB,KAAK,CAACK,gBAAgB;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,eACFX,OAAA,CAACR,MAAM;UACL4B,UAAU,EAAC,QAAQ;UACnBC,SAAS,EAAC,MAAM;UAChBC,UAAU,EAAER,KAAK,CAACS,EAAE,MAAKrB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEqB,EAAE,IAAG,MAAM,GAAG,QAAS;UAC/DC,OAAO,EAAEA,CAAA,KAAMrB,aAAa,CAACW,KAAK,CAAE;UACpCW,OAAO,EAAC,MAAM;UAAAb,QAAA,EAEbE,KAAK,CAACY;QAAI;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC,GAhBIG,KAAK,CAACS,EAAE;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAiBb,CACX;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACP,EAAA,CA7BIH,SAAS;EAAA,QACwBV,SAAS;AAAA;AAAAoC,EAAA,GAD1C1B,SAAS;AA+Bf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}